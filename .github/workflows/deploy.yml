name: Deploy Docker Image to EC2 (Amazon Linux)

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE: whomahtab/divyamapp # Your Docker Hub image
  PORT: ${{ secrets.PORT }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ec2-user
          DB_URL: ${{ secrets.DB_URL }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          # 1. Create and secure SSH key
          echo "$PRIVATE_KEY" > deploy-key.pem
          chmod 600 deploy-key.pem

          # 2. Connect to EC2 and deploy with all variables explicitly passed
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i deploy-key.pem ${USER}@${HOST} "
            # 3. Install Docker if not available
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...'
              sudo yum update -y || { echo 'Update failed'; exit 1; }
              sudo yum install docker -y || { echo 'Docker install failed'; exit 1; }
              sudo service docker start || { echo 'Docker start failed'; exit 1; }
              sudo usermod -a -G docker ec2-user
              sudo chkconfig docker on
            else
              echo 'Docker is already installed.'
            fi

            # 4. Stop and remove previous container (if any)
            docker stop my-app || true
            docker rm my-app || true

            # 5. Pull the latest Docker image (with debug output)
            echo 'Attempting to pull image: $DOCKER_IMAGE'
            for i in {1..3}; do
              if docker pull '$DOCKER_IMAGE'; then
                echo 'Successfully pulled image'
                break
              else
                echo 'Pull attempt $i failed'
                sleep 5
                [ \$i -eq 3 ] && { echo 'Failed to pull image after 3 attempts'; exit 1; }
              fi
            done

            # 6. Run the new container
            docker run -d \
              --name my-app \
              --restart unless-stopped \
              -p $PORT:$PORT \
              -e NODE_ENV=production \
              -e PORT=$PORT \
              -e DB_URL='$DB_URL' \
              -e API_KEY='$API_KEY' \
              '$DOCKER_IMAGE' || { echo 'Container failed to start'; exit 1; }

            # 7. Confirm container is running
            sleep 10
            docker ps | grep my-app || { echo 'Container not running'; exit 1; }
          "

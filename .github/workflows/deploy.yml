name: Build, Push, and Deploy to EC2

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE: whomahtab/divyamapp # Change to your Docker Hub image
  PORT: ${{ secrets.PORT }} # Your app's port (e.g., 3000)

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t $DOCKER_IMAGE .
          docker tag $DOCKER_IMAGE $DOCKER_IMAGE:latest

      - name: Push to Docker Hub (public repo)
        run: docker push $DOCKER_IMAGE

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ec2-user
        run: |
          # Setup SSH key
          echo "$PRIVATE_KEY" > deploy-key.pem
          chmod 600 deploy-key.pem

          # SSH into EC2 and deploy
          ssh -o StrictHostKeyChecking=no -i deploy-key.pem $EC2_USER@$EC2_HOST "
            # Install Docker if missing
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install docker -y
              sudo service docker start
              sudo usermod -aG docker $EC2_USER
            fi

            # Clean up old container
            docker stop my-app || true
            docker rm my-app || true

            # Pull and run new image
            docker pull $DOCKER_IMAGE
            docker run -d \
              --name my-app \
              --restart unless-stopped \
              -p $PORT:$PORT \
              -e PORT=$PORT \
              -e DB_URL='$DB_URL' \
              -e API_KEY='$API_KEY' \
              $DOCKER_IMAGE

            # Verify deployment
            sleep 5
            docker ps | grep my-app
          "

name: Deploy Docker Image to EC2 (Amazon Linux)

on:
  push:
    branches: [main]

env:
  DOCKER_IMAGE: whomahtab/divyamserver # Your Docker Hub image
  PORT: ${{ secrets.PORT }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push Docker Image for linux/amd64
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ env.DOCKER_IMAGE }}

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ec2-user
          DB_URL: ${{ secrets.DB_URL }}
          API_KEY: ${{ secrets.API_KEY }}
        run: |
          # 1. Create and secure SSH key
          echo "$PRIVATE_KEY" > deploy-key.pem
          chmod 600 deploy-key.pem

          # 2. Connect to EC2 and deploy with all variables explicitly passed
          ssh -o ConnectTimeout=30 -o StrictHostKeyChecking=no -i deploy-key.pem ${USER}@${HOST} "
            # 3. Install Docker if not available
            if ! command -v docker &> /dev/null; then
              echo 'Installing Docker...'
              sudo yum update -y || { echo 'Update failed'; exit 1; }
              sudo yum install docker -y || { echo 'Docker install failed'; exit 1; }
              sudo service docker start || { echo 'Docker start failed'; exit 1; }
              sudo usermod -a -G docker ec2-user
              sudo chkconfig docker on
            else
              echo 'Docker is already installed.'
            fi

            # -4.0 Run as SUPER user

            sudo su

            # 4. Stop and remove previous container (if any)
            docker stop divyamserver || true
            docker rm  divyamserver || true


            # Pull the latest Docker image (with debug output)
            echo "Pulling latest image: $DOCKER_IMAGE"
            docker pull '$DOCKER_IMAGE' || { echo 'Image pull failed'; exit 1; }

            # Run the new container
            docker run -d \
              --name divyamserver \
              --restart unless-stopped \
              --env-file /home/${USER}/prod.env \
              -p 3000:3000 \
              '$DOCKER_IMAGE' || { echo 'Container failed to start'; exit 1; }

            # Confirm container is running
            sleep 10
            docker ps | grep divyamserver || { echo 'Container not running'; exit 1; }
          EOF
